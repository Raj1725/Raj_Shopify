{% comment %}
snippets/sidebar-list-filter.liquid

Renders the sidebar list filter. Handles normal, size and color filters.

Accepts:
- filter {Object} - Filter Liquid object
- block {Object} - Section block Liquid object
- unique_id {String} - Unique identifier

Usage:
{%
  render 'sidebar-list-filter',
  filter: filter,
  block: block,
  unique_id: unique_id
%}
{% endcomment %}
{%- liquid
  # Set initial values
  assign is_size_filter = false
  assign is_color_filter = false
  assign filter_label_to_lowercase = filter.label | downcase

  # Check if this is a color filter
  if filter_label_to_lowercase contains "color"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "colour"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "farbe"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "couleur"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "colore"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "cor"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "swatch"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "amostra"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "Ã©chantillon"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "muster"
    assign is_color_filter = true
  elsif filter_label_to_lowercase contains "size"
    assign is_size_filter = true
  elsif filter_label_to_lowercase contains "talla"
    assign is_size_filter = true
  elsif filter_label_to_lowercase contains "taglia"
    assign is_size_filter = true
  elsif filter_label_to_lowercase contains "taille"
    assign is_size_filter = true
  elsif filter_label_to_lowercase contains "tamanho"
    assign is_size_filter = true
  elsif filter_label_to_lowercase contains "grosse"
    assign is_size_filter = true
  endif

  # Set filter type
  if is_color_filter
    assign filter_type = 'color'
  elsif is_size_filter
    assign filter_type = 'size'
  else
    assign filter_type = 'regular'
  endif

  # Get block settings
  assign scroll_long_lists = block.settings.scroll_long_lists
  assign two_column_labels = block.settings.two_column_labels
  assign filter_color_swatches = block.settings.filter_color_swatches
  assign show_filter_count = block.settings.show_filter_count

  assign show_swatch = true
  assign show_text = true
  assign swatch_only = false
  assign two_column_labels = false

  if filter_type == 'size' or filter_type == 'regular'
    if block.settings.two_column_labels
      assign two_column_labels = true
    endif
  endif

  if is_color_filter and filter_color_swatches == 'color_swatch_with_text'
    assign two_column_labels = true
    assign show_swatch = true
    assign show_text = true
    assign swatch_only = false
    assign list_item_class = 'filter_swatch two_columns'
  endif

  if is_color_filter and filter_color_swatches == 'color_swatch_only'
    assign show_swatch = true
    assign show_text = false
    assign swatch_only = true
    assign list_item_class = 'swatch_only'
  endif

  if is_color_filter and filter_color_swatches == 'text_only'
    assign show_swatch = false
    assign show_text = true
    assign swatch_only = false
    assign list_item_class = 'no_color_swatch'
  endif

-%}
<div class="sidebar-filter filter--{{ filter_type }}{% if scroll_long_lists %} scroll{% endif %}">
  <h4>{{ filter.label | escape }} {% if filter.operator == 'AND' %}<small>(Match All)</small>{% endif %}</h4>
  <ul class="sidebar--filters-ul{% if two_column_labels %} flex--row{% endif %}">
    {% liquid
      if filter.operator == 'AND'
        assign active_values = filter.values | where: 'active', true
        assign inactive_values = filter.values | where: 'active', false
        assign sorted_values = active_values | concat: inactive_values
      else
        assign sorted_values = filter.values
      endif
     %}
    {% for value in sorted_values %}

      {%- liquid
        assign variant_img_url = null
        assign swatch_color_name = value.label | handleize | downcase | append: '.png'
        assign swatch_image_url = swatch_color_name | file_url
        if value.display.type == 'colors'
          assign css_color = value.display.value
        else
          assign css_color = value.label | split: ' ' | last | downcase
        endif

        if images[swatch_color_name] != blank
          assign bg_img = 'background-image:url(' | append:  swatch_image_url | append: ');'
        else
          assign bg_img = ''
        endif
        assign bg_color = 'background-color:' | append:  css_color | append: ';'

        if value.active
          assign status = 'current'
          assign url = value.url_to_remove
        elsif value.count == 0 and value.active == false
          assign status = 'disabled'
          assign url = ''
        else
          assign status = ''
          assign url = value.url_to_add
        endif
      -%}

      {% liquid
        assign size_limit = value.display.value.size | at_most: 4
        assign rotation = '0deg'
        if size_limit == 2
          assign rotation = '45deg'
        endif

        assign angle_increment = 360 | divided_by: size_limit
        assign angle = 0

        comment 
          presentation swatches should be independent and not controlled by existing product variant color swatches although the 2 can show colors
          classes set based on the presentation value display type setup to control li classes and image styles
        endcomment

        assign swatch_class = ''
        assign crop_swatch_image = false

        if filter.presentation == 'swatch' and value.display.type == 'image'
          assign swatch_class = 'presentation--swatch'
          if block.settings.swatch_size contains 'thumbnail'
            assign swatch_class = swatch_class | append: ' size--thumbnail two_columns'
          else
            assign swatch_class = swatch_class | append: ' size--icon'
          endif
          if block.settings.crop_swatch_image
              assign swatch_class = swatch_class | append: ' image--cropped'
          endif
          assign show_swatch = true
          assign show_text = true
          assign list_item_class = ''
        endif

        if filter.presentation == 'swatch' and value.display.type == 'colors'
          assign show_swatch = true
          assign show_text = true
          assign swatch_class = 'filter_swatch two_columns'
          assign list_item_class = ''
        endif

      %}

      {%- capture conic_gradient -%}
        {%- for color in value.display.value limit: size_limit -%}
          {{ color }} {{ angle }}deg{%- assign angle = angle | plus: angle_increment %} {{ angle }}deg{%- unless forloop.last %}, {%- endunless -%}
        {%- endfor -%}
      {%- endcapture -%}
      <li class="{{ status }} {{ swatch_class }}{% if is_color_filter %} {{ list_item_class }}{% endif %}">
        {% if is_color_filter %}
          <a class="js-collection-side-filter {{ status }}" href="{{ url }}" title="{{ value.label }}">
            <input type="checkbox"
                   name="{{ value.param_name }}"
                   id="{{ filter.label | handle }}--{{ value.value | handle }}--{{ unique_id }}"
                   value="{{ value.value }}"
                   {% if value.active %}checked{% endif %}
                   {% if value.count == 0 and value.active == false %}disabled{% endif%} >
            {% if show_swatch == true %}
              {% if filter.presentation == 'swatch' %}
                {% comment %}
                We capture the classes out here so that we can pass it into the image_tag filter.
                {% endcomment %}
                {%- capture classes -%}
                  color-filter color-filter--rounded color-filter--{{- status -}} {{- status -}}
                {%- endcapture -%}
                {% case value.display.type %}
                  {% when 'colors' %}
                    <div class="{{- classes -}}" style="background: conic-gradient({{ conic_gradient }}); transform: rotateZ({{ rotation }});"></div>
                  {% when 'image' %}
                    <div class="filter--presentation_image">{{ value.display.value | image_url: width: 300 | image_tag: alt: value.display.value.alt, class: swatch_class }}</div>
                {% endcase %}
              {% else %}
                <span class="color-filter color-filter--rounded color-filter--{{ status }} {{ status }}" style="{{ bg_color }}{{ bg_img }}"></span>
              {% endif %}
            {% endif %}
            {% if show_text == true %}
              <label class="color-filter--label" for="{{ filter.label | handle }}--{{ value.value | handle }}--{{ unique_id }}">{{ value.label | escape }}{% if show_filter_count %} <span class="filter__count">({{ value.count }})</span>{% endif %}</label>
            {% endif %}
          </a>
        {% else %}
          <a class="js-collection-side-filter {{ status }}" data-tag="{{ url }}" href="{{ url }}">
            <input type="checkbox"
                   name="{{ value.param_name }}"
                   value="{{ value.value }}"
                   id="{{ filter.label | handle }}--{{ value.value | handle }}--{{ unique_id }}"
                   {% if value.active %}checked{% endif %}
                   {% if value.count == 0 and value.active == false %}disabled{% endif%} >
            <label class="regular-filter--label" for="{{ filter.label | handle }}--{{ value.value | handle }}--{{ unique_id}}">{{ value.label | escape }}{% if show_filter_count %} <span class="filter__count">({{ value.count }})</span>{% endif %}</label>
          </a>
        {% endif %}
      </li>
    {% endfor %}
  </ul>
</div>
